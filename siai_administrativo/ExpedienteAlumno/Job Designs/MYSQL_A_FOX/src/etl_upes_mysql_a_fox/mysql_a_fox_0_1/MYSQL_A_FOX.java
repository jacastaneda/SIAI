// ============================================================================
//
// Copyright (c) 2005-2012, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / JobDesigner (CodeGenerator version 5.1.2.r90681)
// You can find more information about Talend products at www.talend.com.
// You may distribute this code under the terms of the GNU LGPL license
// http://www.gnu.org/licenses/lgpl.html).
//
// ============================================================================
package etl_upes_mysql_a_fox.mysql_a_fox_0_1;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: MYSQL_A_FOX Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.1.2.r90681
 * @status 
 */
public class MYSQL_A_FOX implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "MYSQL_A_FOX";
	private final String projectName = "ETL_UPES_MYSQL_A_FOX";
	public Integer errorCode = null;
	private String currentComponent = "";
	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception = null;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				globalMap.put(currentComponent + "_ERROR_MESSAGE", e
						.getMessage());
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MYSQL_A_FOX.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MYSQL_A_FOX.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				}
			} else {

				status = "failure";

			}
		}
	}

	public void tMysqlInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tMap_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		end_Hash.put("tDBOutput_2", System.currentTimeMillis());

		status = "failure";

		tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);

	}

	public void tMysqlInput_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId()
				+ "", "FATAL", "", exception.getMessage(), ResumeUtil
				.getExceptionStackTrace(exception), "");

	}

	private ESBProviderCallback callback = null;

	public void setProviderCallback(ESBProviderCallback callback) {
	}

	public ESBEndpointInfo getEndpoint() {
		return null;
	}

	public static class ExpedienteStruct implements
			routines.system.IPersistableRow<ExpedienteStruct> {
		final static byte[] commonByteArrayLock_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[0];
		static byte[] commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String carnet;

		public String getCarnet() {
			return this.carnet;
		}

		public String codcarrera;

		public String getCodcarrera() {
			return this.codcarrera;
		}

		public String nombres;

		public String getNombres() {
			return this.nombres;
		}

		public String apellido1;

		public String getApellido1() {
			return this.apellido1;
		}

		public String apellido2;

		public String getApellido2() {
			return this.apellido2;
		}

		public String apellcasada;

		public String getApellcasada() {
			return this.apellcasada;
		}

		public String muninacimi;

		public String getMuninacimi() {
			return this.muninacimi;
		}

		public Float deptonacim;

		public Float getDeptonacim() {
			return this.deptonacim;
		}

		public java.util.Date fechanacim;

		public java.util.Date getFechanacim() {
			return this.fechanacim;
		}

		public String nacionalidad;

		public String getNacionalidad() {
			return this.nacionalidad;
		}

		public Float edad;

		public Float getEdad() {
			return this.edad;
		}

		public String sexo;

		public String getSexo() {
			return this.sexo;
		}

		public String estadocivil;

		public String getEstadocivil() {
			return this.estadocivil;
		}

		public String cedula;

		public String getCedula() {
			return this.cedula;
		}

		public String telefono;

		public String getTelefono() {
			return this.telefono;
		}

		public String direccion;

		public String getDireccion() {
			return this.direccion;
		}

		public String munidirecc;

		public String getMunidirecc() {
			return this.munidirecc;
		}

		public Float deptodirecc;

		public Float getDeptodirecc() {
			return this.deptodirecc;
		}

		public String institucion;

		public String getInstitucion() {
			return this.institucion;
		}

		public String titulo;

		public String getTitulo() {
			return this.titulo;
		}

		public String expediente;

		public String getExpediente() {
			return this.expediente;
		}

		public String lugartrabajo;

		public String getLugartrabajo() {
			return this.lugartrabajo;
		}

		public String teltrabajo;

		public String getTeltrabajo() {
			return this.teltrabajo;
		}

		public String dirtrabajo;

		public String getDirtrabajo() {
			return this.dirtrabajo;
		}

		public String tipoingreso;

		public String getTipoingreso() {
			return this.tipoingreso;
		}

		public String estatus;

		public String getEstatus() {
			return this.estatus;
		}

		public String cicloingreso;

		public String getCicloingreso() {
			return this.cicloingreso;
		}

		public String observacion;

		public String getObservacion() {
			return this.observacion;
		}

		public Boolean titulobach;

		public Boolean getTitulobach() {
			return this.titulobach;
		}

		public Boolean partidaoriginal;

		public Boolean getPartidaoriginal() {
			return this.partidaoriginal;
		}

		public Boolean certificacion;

		public Boolean getCertificacion() {
			return this.certificacion;
		}

		public Boolean fotos;

		public Boolean getFotos() {
			return this.fotos;
		}

		public Boolean declaracion;

		public Boolean getDeclaracion() {
			return this.declaracion;
		}

		public Float codigointerno;

		public Float getCodigointerno() {
			return this.codigointerno;
		}

		public Float avisos_c;

		public Float getAvisos_c() {
			return this.avisos_c;
		}

		public Float avisos_i;

		public Float getAvisos_i() {
			return this.avisos_i;
		}

		public Float avisos_d;

		public Float getAvisos_d() {
			return this.avisos_d;
		}

		public String empresa;

		public String getEmpresa() {
			return this.empresa;
		}

		public String tipobeca;

		public String getTipobeca() {
			return this.tipobeca;
		}

		public String empresabec;

		public String getEmpresabec() {
			return this.empresabec;
		}

		public String codigo_plan;

		public String getCodigo_plan() {
			return this.codigo_plan;
		}

		public Float cumgeneral;

		public Float getCumgeneral() {
			return this.cumgeneral;
		}

		public Float cumrelativo;

		public Float getCumrelativo() {
			return this.cumrelativo;
		}

		public String codigo_usuario;

		public String getCodigo_usuario() {
			return this.codigo_usuario;
		}

		public java.util.Date fecha_ingr;

		public java.util.Date getFecha_ingr() {
			return this.fecha_ingr;
		}

		public String tipopago;

		public String getTipopago() {
			return this.tipopago;
		}

		public Float saldoanterior;

		public Float getSaldoanterior() {
			return this.saldoanterior;
		}

		public Float cargos;

		public Float getCargos() {
			return this.cargos;
		}

		public Float abonos;

		public Float getAbonos() {
			return this.abonos;
		}

		public Float saldoactual;

		public Float getSaldoactual() {
			return this.saldoactual;
		}

		public java.util.Date fecha_solicitud;

		public java.util.Date getFecha_solicitud() {
			return this.fecha_solicitud;
		}

		public String extension;

		public String getExtension() {
			return this.extension;
		}

		public Float cumtemporal;

		public Float getCumtemporal() {
			return this.cumtemporal;
		}

		public Float uvtemporal;

		public Float getUvtemporal() {
			return this.uvtemporal;
		}

		public Boolean marca;

		public Boolean getMarca() {
			return this.marca;
		}

		public Float rebaja;

		public Float getRebaja() {
			return this.rebaja;
		}

		public String imagen;

		public String getImagen() {
			return this.imagen;
		}

		public String ciclogra;

		public String getCiclogra() {
			return this.ciclogra;
		}

		public java.util.Date fec_sal;

		public java.util.Date getFec_sal() {
			return this.fec_sal;
		}

		public java.util.Date fec_rec;

		public java.util.Date getFec_rec() {
			return this.fec_rec;
		}

		public java.util.Date fec_apr;

		public java.util.Date getFec_apr() {
			return this.fec_apr;
		}

		public java.util.Date fec_bac;

		public java.util.Date getFec_bac() {
			return this.fec_bac;
		}

		public java.util.Date fec_pda;

		public java.util.Date getFec_pda() {
			return this.fec_pda;
		}

		public java.util.Date fec_cer;

		public java.util.Date getFec_cer() {
			return this.fec_cer;
		}

		public java.util.Date fec_fot;

		public java.util.Date getFec_fot() {
			return this.fec_fot;
		}

		public String convenio;

		public String getConvenio() {
			return this.convenio;
		}

		public String punto;

		public String getPunto() {
			return this.punto;
		}

		public String acta;

		public String getActa() {
			return this.acta;
		}

		public java.util.Date fechact;

		public java.util.Date getFechact() {
			return this.fechact;
		}

		public String nui;

		public String getNui() {
			return this.nui;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.carnet == null) ? 0 : this.carnet.hashCode());

				result = prime * result
						+ ((this.nui == null) ? 0 : this.nui.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final ExpedienteStruct other = (ExpedienteStruct) obj;

			if (this.carnet == null) {
				if (other.carnet != null)
					return false;
			} else if (!this.carnet.equals(other.carnet))
				return false;

			if (this.nui == null) {
				if (other.nui != null)
					return false;
			} else if (!this.nui.equals(other.nui))
				return false;

			return true;
		}

		public void copyDataTo(ExpedienteStruct other) {

			other.carnet = this.carnet;
			other.codcarrera = this.codcarrera;
			other.nombres = this.nombres;
			other.apellido1 = this.apellido1;
			other.apellido2 = this.apellido2;
			other.apellcasada = this.apellcasada;
			other.muninacimi = this.muninacimi;
			other.deptonacim = this.deptonacim;
			other.fechanacim = this.fechanacim;
			other.nacionalidad = this.nacionalidad;
			other.edad = this.edad;
			other.sexo = this.sexo;
			other.estadocivil = this.estadocivil;
			other.cedula = this.cedula;
			other.telefono = this.telefono;
			other.direccion = this.direccion;
			other.munidirecc = this.munidirecc;
			other.deptodirecc = this.deptodirecc;
			other.institucion = this.institucion;
			other.titulo = this.titulo;
			other.expediente = this.expediente;
			other.lugartrabajo = this.lugartrabajo;
			other.teltrabajo = this.teltrabajo;
			other.dirtrabajo = this.dirtrabajo;
			other.tipoingreso = this.tipoingreso;
			other.estatus = this.estatus;
			other.cicloingreso = this.cicloingreso;
			other.observacion = this.observacion;
			other.titulobach = this.titulobach;
			other.partidaoriginal = this.partidaoriginal;
			other.certificacion = this.certificacion;
			other.fotos = this.fotos;
			other.declaracion = this.declaracion;
			other.codigointerno = this.codigointerno;
			other.avisos_c = this.avisos_c;
			other.avisos_i = this.avisos_i;
			other.avisos_d = this.avisos_d;
			other.empresa = this.empresa;
			other.tipobeca = this.tipobeca;
			other.empresabec = this.empresabec;
			other.codigo_plan = this.codigo_plan;
			other.cumgeneral = this.cumgeneral;
			other.cumrelativo = this.cumrelativo;
			other.codigo_usuario = this.codigo_usuario;
			other.fecha_ingr = this.fecha_ingr;
			other.tipopago = this.tipopago;
			other.saldoanterior = this.saldoanterior;
			other.cargos = this.cargos;
			other.abonos = this.abonos;
			other.saldoactual = this.saldoactual;
			other.fecha_solicitud = this.fecha_solicitud;
			other.extension = this.extension;
			other.cumtemporal = this.cumtemporal;
			other.uvtemporal = this.uvtemporal;
			other.marca = this.marca;
			other.rebaja = this.rebaja;
			other.imagen = this.imagen;
			other.ciclogra = this.ciclogra;
			other.fec_sal = this.fec_sal;
			other.fec_rec = this.fec_rec;
			other.fec_apr = this.fec_apr;
			other.fec_bac = this.fec_bac;
			other.fec_pda = this.fec_pda;
			other.fec_cer = this.fec_cer;
			other.fec_fot = this.fec_fot;
			other.convenio = this.convenio;
			other.punto = this.punto;
			other.acta = this.acta;
			other.fechact = this.fechact;
			other.nui = this.nui;

		}

		public void copyKeysDataTo(ExpedienteStruct other) {

			other.carnet = this.carnet;
			other.nui = this.nui;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX.length) {
					if (length < 1024
							&& commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX.length == 0) {
						commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[1024];
					} else {
						commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX,
						0, length);
				strReturn = new String(
						commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX) {

				try {

					int length = 0;

					this.carnet = readString(dis);

					this.codcarrera = readString(dis);

					this.nombres = readString(dis);

					this.apellido1 = readString(dis);

					this.apellido2 = readString(dis);

					this.apellcasada = readString(dis);

					this.muninacimi = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.deptonacim = null;
					} else {
						this.deptonacim = dis.readFloat();
					}

					this.fechanacim = readDate(dis);

					this.nacionalidad = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.edad = null;
					} else {
						this.edad = dis.readFloat();
					}

					this.sexo = readString(dis);

					this.estadocivil = readString(dis);

					this.cedula = readString(dis);

					this.telefono = readString(dis);

					this.direccion = readString(dis);

					this.munidirecc = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.deptodirecc = null;
					} else {
						this.deptodirecc = dis.readFloat();
					}

					this.institucion = readString(dis);

					this.titulo = readString(dis);

					this.expediente = readString(dis);

					this.lugartrabajo = readString(dis);

					this.teltrabajo = readString(dis);

					this.dirtrabajo = readString(dis);

					this.tipoingreso = readString(dis);

					this.estatus = readString(dis);

					this.cicloingreso = readString(dis);

					this.observacion = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.titulobach = null;
					} else {
						this.titulobach = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.partidaoriginal = null;
					} else {
						this.partidaoriginal = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.certificacion = null;
					} else {
						this.certificacion = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.fotos = null;
					} else {
						this.fotos = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.declaracion = null;
					} else {
						this.declaracion = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.codigointerno = null;
					} else {
						this.codigointerno = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.avisos_c = null;
					} else {
						this.avisos_c = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.avisos_i = null;
					} else {
						this.avisos_i = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.avisos_d = null;
					} else {
						this.avisos_d = dis.readFloat();
					}

					this.empresa = readString(dis);

					this.tipobeca = readString(dis);

					this.empresabec = readString(dis);

					this.codigo_plan = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cumgeneral = null;
					} else {
						this.cumgeneral = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cumrelativo = null;
					} else {
						this.cumrelativo = dis.readFloat();
					}

					this.codigo_usuario = readString(dis);

					this.fecha_ingr = readDate(dis);

					this.tipopago = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.saldoanterior = null;
					} else {
						this.saldoanterior = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.cargos = null;
					} else {
						this.cargos = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.abonos = null;
					} else {
						this.abonos = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.saldoactual = null;
					} else {
						this.saldoactual = dis.readFloat();
					}

					this.fecha_solicitud = readDate(dis);

					this.extension = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.cumtemporal = null;
					} else {
						this.cumtemporal = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.uvtemporal = null;
					} else {
						this.uvtemporal = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.marca = null;
					} else {
						this.marca = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.rebaja = null;
					} else {
						this.rebaja = dis.readFloat();
					}

					this.imagen = readString(dis);

					this.ciclogra = readString(dis);

					this.fec_sal = readDate(dis);

					this.fec_rec = readDate(dis);

					this.fec_apr = readDate(dis);

					this.fec_bac = readDate(dis);

					this.fec_pda = readDate(dis);

					this.fec_cer = readDate(dis);

					this.fec_fot = readDate(dis);

					this.convenio = readString(dis);

					this.punto = readString(dis);

					this.acta = readString(dis);

					this.fechact = readDate(dis);

					this.nui = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.carnet, dos);

				// String

				writeString(this.codcarrera, dos);

				// String

				writeString(this.nombres, dos);

				// String

				writeString(this.apellido1, dos);

				// String

				writeString(this.apellido2, dos);

				// String

				writeString(this.apellcasada, dos);

				// String

				writeString(this.muninacimi, dos);

				// Float

				if (this.deptonacim == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.deptonacim);
				}

				// java.util.Date

				writeDate(this.fechanacim, dos);

				// String

				writeString(this.nacionalidad, dos);

				// Float

				if (this.edad == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.edad);
				}

				// String

				writeString(this.sexo, dos);

				// String

				writeString(this.estadocivil, dos);

				// String

				writeString(this.cedula, dos);

				// String

				writeString(this.telefono, dos);

				// String

				writeString(this.direccion, dos);

				// String

				writeString(this.munidirecc, dos);

				// Float

				if (this.deptodirecc == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.deptodirecc);
				}

				// String

				writeString(this.institucion, dos);

				// String

				writeString(this.titulo, dos);

				// String

				writeString(this.expediente, dos);

				// String

				writeString(this.lugartrabajo, dos);

				// String

				writeString(this.teltrabajo, dos);

				// String

				writeString(this.dirtrabajo, dos);

				// String

				writeString(this.tipoingreso, dos);

				// String

				writeString(this.estatus, dos);

				// String

				writeString(this.cicloingreso, dos);

				// String

				writeString(this.observacion, dos);

				// Boolean

				if (this.titulobach == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.titulobach);
				}

				// Boolean

				if (this.partidaoriginal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.partidaoriginal);
				}

				// Boolean

				if (this.certificacion == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.certificacion);
				}

				// Boolean

				if (this.fotos == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.fotos);
				}

				// Boolean

				if (this.declaracion == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.declaracion);
				}

				// Float

				if (this.codigointerno == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.codigointerno);
				}

				// Float

				if (this.avisos_c == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.avisos_c);
				}

				// Float

				if (this.avisos_i == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.avisos_i);
				}

				// Float

				if (this.avisos_d == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.avisos_d);
				}

				// String

				writeString(this.empresa, dos);

				// String

				writeString(this.tipobeca, dos);

				// String

				writeString(this.empresabec, dos);

				// String

				writeString(this.codigo_plan, dos);

				// Float

				if (this.cumgeneral == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cumgeneral);
				}

				// Float

				if (this.cumrelativo == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cumrelativo);
				}

				// String

				writeString(this.codigo_usuario, dos);

				// java.util.Date

				writeDate(this.fecha_ingr, dos);

				// String

				writeString(this.tipopago, dos);

				// Float

				if (this.saldoanterior == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.saldoanterior);
				}

				// Float

				if (this.cargos == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cargos);
				}

				// Float

				if (this.abonos == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.abonos);
				}

				// Float

				if (this.saldoactual == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.saldoactual);
				}

				// java.util.Date

				writeDate(this.fecha_solicitud, dos);

				// String

				writeString(this.extension, dos);

				// Float

				if (this.cumtemporal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.cumtemporal);
				}

				// Float

				if (this.uvtemporal == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.uvtemporal);
				}

				// Boolean

				if (this.marca == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.marca);
				}

				// Float

				if (this.rebaja == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.rebaja);
				}

				// String

				writeString(this.imagen, dos);

				// String

				writeString(this.ciclogra, dos);

				// java.util.Date

				writeDate(this.fec_sal, dos);

				// java.util.Date

				writeDate(this.fec_rec, dos);

				// java.util.Date

				writeDate(this.fec_apr, dos);

				// java.util.Date

				writeDate(this.fec_bac, dos);

				// java.util.Date

				writeDate(this.fec_pda, dos);

				// java.util.Date

				writeDate(this.fec_cer, dos);

				// java.util.Date

				writeDate(this.fec_fot, dos);

				// String

				writeString(this.convenio, dos);

				// String

				writeString(this.punto, dos);

				// String

				writeString(this.acta, dos);

				// java.util.Date

				writeDate(this.fechact, dos);

				// String

				writeString(this.nui, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("carnet=" + carnet);
			sb.append(",codcarrera=" + codcarrera);
			sb.append(",nombres=" + nombres);
			sb.append(",apellido1=" + apellido1);
			sb.append(",apellido2=" + apellido2);
			sb.append(",apellcasada=" + apellcasada);
			sb.append(",muninacimi=" + muninacimi);
			sb.append(",deptonacim=" + String.valueOf(deptonacim));
			sb.append(",fechanacim=" + String.valueOf(fechanacim));
			sb.append(",nacionalidad=" + nacionalidad);
			sb.append(",edad=" + String.valueOf(edad));
			sb.append(",sexo=" + sexo);
			sb.append(",estadocivil=" + estadocivil);
			sb.append(",cedula=" + cedula);
			sb.append(",telefono=" + telefono);
			sb.append(",direccion=" + direccion);
			sb.append(",munidirecc=" + munidirecc);
			sb.append(",deptodirecc=" + String.valueOf(deptodirecc));
			sb.append(",institucion=" + institucion);
			sb.append(",titulo=" + titulo);
			sb.append(",expediente=" + expediente);
			sb.append(",lugartrabajo=" + lugartrabajo);
			sb.append(",teltrabajo=" + teltrabajo);
			sb.append(",dirtrabajo=" + dirtrabajo);
			sb.append(",tipoingreso=" + tipoingreso);
			sb.append(",estatus=" + estatus);
			sb.append(",cicloingreso=" + cicloingreso);
			sb.append(",observacion=" + observacion);
			sb.append(",titulobach=" + String.valueOf(titulobach));
			sb.append(",partidaoriginal=" + String.valueOf(partidaoriginal));
			sb.append(",certificacion=" + String.valueOf(certificacion));
			sb.append(",fotos=" + String.valueOf(fotos));
			sb.append(",declaracion=" + String.valueOf(declaracion));
			sb.append(",codigointerno=" + String.valueOf(codigointerno));
			sb.append(",avisos_c=" + String.valueOf(avisos_c));
			sb.append(",avisos_i=" + String.valueOf(avisos_i));
			sb.append(",avisos_d=" + String.valueOf(avisos_d));
			sb.append(",empresa=" + empresa);
			sb.append(",tipobeca=" + tipobeca);
			sb.append(",empresabec=" + empresabec);
			sb.append(",codigo_plan=" + codigo_plan);
			sb.append(",cumgeneral=" + String.valueOf(cumgeneral));
			sb.append(",cumrelativo=" + String.valueOf(cumrelativo));
			sb.append(",codigo_usuario=" + codigo_usuario);
			sb.append(",fecha_ingr=" + String.valueOf(fecha_ingr));
			sb.append(",tipopago=" + tipopago);
			sb.append(",saldoanterior=" + String.valueOf(saldoanterior));
			sb.append(",cargos=" + String.valueOf(cargos));
			sb.append(",abonos=" + String.valueOf(abonos));
			sb.append(",saldoactual=" + String.valueOf(saldoactual));
			sb.append(",fecha_solicitud=" + String.valueOf(fecha_solicitud));
			sb.append(",extension=" + extension);
			sb.append(",cumtemporal=" + String.valueOf(cumtemporal));
			sb.append(",uvtemporal=" + String.valueOf(uvtemporal));
			sb.append(",marca=" + String.valueOf(marca));
			sb.append(",rebaja=" + String.valueOf(rebaja));
			sb.append(",imagen=" + imagen);
			sb.append(",ciclogra=" + ciclogra);
			sb.append(",fec_sal=" + String.valueOf(fec_sal));
			sb.append(",fec_rec=" + String.valueOf(fec_rec));
			sb.append(",fec_apr=" + String.valueOf(fec_apr));
			sb.append(",fec_bac=" + String.valueOf(fec_bac));
			sb.append(",fec_pda=" + String.valueOf(fec_pda));
			sb.append(",fec_cer=" + String.valueOf(fec_cer));
			sb.append(",fec_fot=" + String.valueOf(fec_fot));
			sb.append(",convenio=" + convenio);
			sb.append(",punto=" + punto);
			sb.append(",acta=" + acta);
			sb.append(",fechact=" + String.valueOf(fechact));
			sb.append(",nui=" + nui);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(ExpedienteStruct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.carnet, other.carnet);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.nui, other.nui);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[0];
		static byte[] commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[0];

		public String CARNET;

		public String getCARNET() {
			return this.CARNET;
		}

		public String CODCARRERA;

		public String getCODCARRERA() {
			return this.CODCARRERA;
		}

		public String NOMBRES;

		public String getNOMBRES() {
			return this.NOMBRES;
		}

		public String APELLIDO1;

		public String getAPELLIDO1() {
			return this.APELLIDO1;
		}

		public String APELLIDO2;

		public String getAPELLIDO2() {
			return this.APELLIDO2;
		}

		public String APELLCASAD;

		public String getAPELLCASAD() {
			return this.APELLCASAD;
		}

		public String MUNINACIMI;

		public String getMUNINACIMI() {
			return this.MUNINACIMI;
		}

		public Float DEPTONACIM;

		public Float getDEPTONACIM() {
			return this.DEPTONACIM;
		}

		public java.util.Date FECHANACIM;

		public java.util.Date getFECHANACIM() {
			return this.FECHANACIM;
		}

		public String NACIONALID;

		public String getNACIONALID() {
			return this.NACIONALID;
		}

		public Float EDAD;

		public Float getEDAD() {
			return this.EDAD;
		}

		public String SEXO;

		public String getSEXO() {
			return this.SEXO;
		}

		public String ESTADOCIVI;

		public String getESTADOCIVI() {
			return this.ESTADOCIVI;
		}

		public String CEDULA;

		public String getCEDULA() {
			return this.CEDULA;
		}

		public String TELEFONO;

		public String getTELEFONO() {
			return this.TELEFONO;
		}

		public String DIRECCION;

		public String getDIRECCION() {
			return this.DIRECCION;
		}

		public String MUNIDIRECC;

		public String getMUNIDIRECC() {
			return this.MUNIDIRECC;
		}

		public Float DEPTODIREC;

		public Float getDEPTODIREC() {
			return this.DEPTODIREC;
		}

		public String INSTITUCIO;

		public String getINSTITUCIO() {
			return this.INSTITUCIO;
		}

		public String TITULO;

		public String getTITULO() {
			return this.TITULO;
		}

		public String EXPEDIENTE;

		public String getEXPEDIENTE() {
			return this.EXPEDIENTE;
		}

		public String LUGARTRABA;

		public String getLUGARTRABA() {
			return this.LUGARTRABA;
		}

		public String TELTRABAJO;

		public String getTELTRABAJO() {
			return this.TELTRABAJO;
		}

		public String DIRTRABAJO;

		public String getDIRTRABAJO() {
			return this.DIRTRABAJO;
		}

		public String TIPOINGRES;

		public String getTIPOINGRES() {
			return this.TIPOINGRES;
		}

		public String ESTATUS;

		public String getESTATUS() {
			return this.ESTATUS;
		}

		public String CICLOINGRE;

		public String getCICLOINGRE() {
			return this.CICLOINGRE;
		}

		public String OBSERVACIO;

		public String getOBSERVACIO() {
			return this.OBSERVACIO;
		}

		public Boolean TITULOBACH;

		public Boolean getTITULOBACH() {
			return this.TITULOBACH;
		}

		public Boolean PARTIDAORI;

		public Boolean getPARTIDAORI() {
			return this.PARTIDAORI;
		}

		public Boolean CERTIFICAC;

		public Boolean getCERTIFICAC() {
			return this.CERTIFICAC;
		}

		public Boolean FOTOS;

		public Boolean getFOTOS() {
			return this.FOTOS;
		}

		public Boolean DECLARACIO;

		public Boolean getDECLARACIO() {
			return this.DECLARACIO;
		}

		public Float CODIGOINTE;

		public Float getCODIGOINTE() {
			return this.CODIGOINTE;
		}

		public Float AVISOS_C;

		public Float getAVISOS_C() {
			return this.AVISOS_C;
		}

		public Float AVISOS_I;

		public Float getAVISOS_I() {
			return this.AVISOS_I;
		}

		public Float AVISOS_D;

		public Float getAVISOS_D() {
			return this.AVISOS_D;
		}

		public String EMPRESA;

		public String getEMPRESA() {
			return this.EMPRESA;
		}

		public String TIPOBECA;

		public String getTIPOBECA() {
			return this.TIPOBECA;
		}

		public String EMPRESABEC;

		public String getEMPRESABEC() {
			return this.EMPRESABEC;
		}

		public String CODIGO_PLA;

		public String getCODIGO_PLA() {
			return this.CODIGO_PLA;
		}

		public Float CUMGENERAL;

		public Float getCUMGENERAL() {
			return this.CUMGENERAL;
		}

		public Float CUMRELATIV;

		public Float getCUMRELATIV() {
			return this.CUMRELATIV;
		}

		public String CODIGO_USU;

		public String getCODIGO_USU() {
			return this.CODIGO_USU;
		}

		public java.util.Date FECHA_INGR;

		public java.util.Date getFECHA_INGR() {
			return this.FECHA_INGR;
		}

		public String TIPOPAGO;

		public String getTIPOPAGO() {
			return this.TIPOPAGO;
		}

		public Float SALDOANTER;

		public Float getSALDOANTER() {
			return this.SALDOANTER;
		}

		public Float CARGOS;

		public Float getCARGOS() {
			return this.CARGOS;
		}

		public Float ABONOS;

		public Float getABONOS() {
			return this.ABONOS;
		}

		public Float SALDOACTUA;

		public Float getSALDOACTUA() {
			return this.SALDOACTUA;
		}

		public java.util.Date FECHA_SOLI;

		public java.util.Date getFECHA_SOLI() {
			return this.FECHA_SOLI;
		}

		public String EXTENSION;

		public String getEXTENSION() {
			return this.EXTENSION;
		}

		public Float CUMTEMPORA;

		public Float getCUMTEMPORA() {
			return this.CUMTEMPORA;
		}

		public Float UVTEMPORAL;

		public Float getUVTEMPORAL() {
			return this.UVTEMPORAL;
		}

		public Boolean MARCA;

		public Boolean getMARCA() {
			return this.MARCA;
		}

		public Float REBAJA;

		public Float getREBAJA() {
			return this.REBAJA;
		}

		public String IMAGEN;

		public String getIMAGEN() {
			return this.IMAGEN;
		}

		public String CICLOGRA;

		public String getCICLOGRA() {
			return this.CICLOGRA;
		}

		public java.util.Date FEC_SAL;

		public java.util.Date getFEC_SAL() {
			return this.FEC_SAL;
		}

		public java.util.Date FEC_REC;

		public java.util.Date getFEC_REC() {
			return this.FEC_REC;
		}

		public java.util.Date FEC_APR;

		public java.util.Date getFEC_APR() {
			return this.FEC_APR;
		}

		public java.util.Date FEC_BAC;

		public java.util.Date getFEC_BAC() {
			return this.FEC_BAC;
		}

		public java.util.Date FEC_PDA;

		public java.util.Date getFEC_PDA() {
			return this.FEC_PDA;
		}

		public java.util.Date FEC_CER;

		public java.util.Date getFEC_CER() {
			return this.FEC_CER;
		}

		public java.util.Date FEC_FOT;

		public java.util.Date getFEC_FOT() {
			return this.FEC_FOT;
		}

		public String CONVENIO;

		public String getCONVENIO() {
			return this.CONVENIO;
		}

		public String PUNTO;

		public String getPUNTO() {
			return this.PUNTO;
		}

		public String ACTA;

		public String getACTA() {
			return this.ACTA;
		}

		public java.util.Date FECHACT;

		public java.util.Date getFECHACT() {
			return this.FECHACT;
		}

		public String NUI;

		public String getNUI() {
			return this.NUI;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX.length) {
					if (length < 1024
							&& commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX.length == 0) {
						commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[1024];
					} else {
						commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX,
						0, length);
				strReturn = new String(
						commonByteArray_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_ETL_UPES_MYSQL_A_FOX_MYSQL_A_FOX) {

				try {

					int length = 0;

					this.CARNET = readString(dis);

					this.CODCARRERA = readString(dis);

					this.NOMBRES = readString(dis);

					this.APELLIDO1 = readString(dis);

					this.APELLIDO2 = readString(dis);

					this.APELLCASAD = readString(dis);

					this.MUNINACIMI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DEPTONACIM = null;
					} else {
						this.DEPTONACIM = dis.readFloat();
					}

					this.FECHANACIM = readDate(dis);

					this.NACIONALID = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.EDAD = null;
					} else {
						this.EDAD = dis.readFloat();
					}

					this.SEXO = readString(dis);

					this.ESTADOCIVI = readString(dis);

					this.CEDULA = readString(dis);

					this.TELEFONO = readString(dis);

					this.DIRECCION = readString(dis);

					this.MUNIDIRECC = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.DEPTODIREC = null;
					} else {
						this.DEPTODIREC = dis.readFloat();
					}

					this.INSTITUCIO = readString(dis);

					this.TITULO = readString(dis);

					this.EXPEDIENTE = readString(dis);

					this.LUGARTRABA = readString(dis);

					this.TELTRABAJO = readString(dis);

					this.DIRTRABAJO = readString(dis);

					this.TIPOINGRES = readString(dis);

					this.ESTATUS = readString(dis);

					this.CICLOINGRE = readString(dis);

					this.OBSERVACIO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.TITULOBACH = null;
					} else {
						this.TITULOBACH = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.PARTIDAORI = null;
					} else {
						this.PARTIDAORI = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CERTIFICAC = null;
					} else {
						this.CERTIFICAC = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.FOTOS = null;
					} else {
						this.FOTOS = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.DECLARACIO = null;
					} else {
						this.DECLARACIO = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CODIGOINTE = null;
					} else {
						this.CODIGOINTE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AVISOS_C = null;
					} else {
						this.AVISOS_C = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AVISOS_I = null;
					} else {
						this.AVISOS_I = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.AVISOS_D = null;
					} else {
						this.AVISOS_D = dis.readFloat();
					}

					this.EMPRESA = readString(dis);

					this.TIPOBECA = readString(dis);

					this.EMPRESABEC = readString(dis);

					this.CODIGO_PLA = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CUMGENERAL = null;
					} else {
						this.CUMGENERAL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CUMRELATIV = null;
					} else {
						this.CUMRELATIV = dis.readFloat();
					}

					this.CODIGO_USU = readString(dis);

					this.FECHA_INGR = readDate(dis);

					this.TIPOPAGO = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.SALDOANTER = null;
					} else {
						this.SALDOANTER = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.CARGOS = null;
					} else {
						this.CARGOS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.ABONOS = null;
					} else {
						this.ABONOS = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.SALDOACTUA = null;
					} else {
						this.SALDOACTUA = dis.readFloat();
					}

					this.FECHA_SOLI = readDate(dis);

					this.EXTENSION = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.CUMTEMPORA = null;
					} else {
						this.CUMTEMPORA = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.UVTEMPORAL = null;
					} else {
						this.UVTEMPORAL = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MARCA = null;
					} else {
						this.MARCA = dis.readBoolean();
					}

					length = dis.readByte();
					if (length == -1) {
						this.REBAJA = null;
					} else {
						this.REBAJA = dis.readFloat();
					}

					this.IMAGEN = readString(dis);

					this.CICLOGRA = readString(dis);

					this.FEC_SAL = readDate(dis);

					this.FEC_REC = readDate(dis);

					this.FEC_APR = readDate(dis);

					this.FEC_BAC = readDate(dis);

					this.FEC_PDA = readDate(dis);

					this.FEC_CER = readDate(dis);

					this.FEC_FOT = readDate(dis);

					this.CONVENIO = readString(dis);

					this.PUNTO = readString(dis);

					this.ACTA = readString(dis);

					this.FECHACT = readDate(dis);

					this.NUI = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CARNET, dos);

				// String

				writeString(this.CODCARRERA, dos);

				// String

				writeString(this.NOMBRES, dos);

				// String

				writeString(this.APELLIDO1, dos);

				// String

				writeString(this.APELLIDO2, dos);

				// String

				writeString(this.APELLCASAD, dos);

				// String

				writeString(this.MUNINACIMI, dos);

				// Float

				if (this.DEPTONACIM == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DEPTONACIM);
				}

				// java.util.Date

				writeDate(this.FECHANACIM, dos);

				// String

				writeString(this.NACIONALID, dos);

				// Float

				if (this.EDAD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.EDAD);
				}

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.ESTADOCIVI, dos);

				// String

				writeString(this.CEDULA, dos);

				// String

				writeString(this.TELEFONO, dos);

				// String

				writeString(this.DIRECCION, dos);

				// String

				writeString(this.MUNIDIRECC, dos);

				// Float

				if (this.DEPTODIREC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.DEPTODIREC);
				}

				// String

				writeString(this.INSTITUCIO, dos);

				// String

				writeString(this.TITULO, dos);

				// String

				writeString(this.EXPEDIENTE, dos);

				// String

				writeString(this.LUGARTRABA, dos);

				// String

				writeString(this.TELTRABAJO, dos);

				// String

				writeString(this.DIRTRABAJO, dos);

				// String

				writeString(this.TIPOINGRES, dos);

				// String

				writeString(this.ESTATUS, dos);

				// String

				writeString(this.CICLOINGRE, dos);

				// String

				writeString(this.OBSERVACIO, dos);

				// Boolean

				if (this.TITULOBACH == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.TITULOBACH);
				}

				// Boolean

				if (this.PARTIDAORI == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.PARTIDAORI);
				}

				// Boolean

				if (this.CERTIFICAC == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.CERTIFICAC);
				}

				// Boolean

				if (this.FOTOS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.FOTOS);
				}

				// Boolean

				if (this.DECLARACIO == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.DECLARACIO);
				}

				// Float

				if (this.CODIGOINTE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CODIGOINTE);
				}

				// Float

				if (this.AVISOS_C == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVISOS_C);
				}

				// Float

				if (this.AVISOS_I == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVISOS_I);
				}

				// Float

				if (this.AVISOS_D == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.AVISOS_D);
				}

				// String

				writeString(this.EMPRESA, dos);

				// String

				writeString(this.TIPOBECA, dos);

				// String

				writeString(this.EMPRESABEC, dos);

				// String

				writeString(this.CODIGO_PLA, dos);

				// Float

				if (this.CUMGENERAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CUMGENERAL);
				}

				// Float

				if (this.CUMRELATIV == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CUMRELATIV);
				}

				// String

				writeString(this.CODIGO_USU, dos);

				// java.util.Date

				writeDate(this.FECHA_INGR, dos);

				// String

				writeString(this.TIPOPAGO, dos);

				// Float

				if (this.SALDOANTER == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SALDOANTER);
				}

				// Float

				if (this.CARGOS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CARGOS);
				}

				// Float

				if (this.ABONOS == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.ABONOS);
				}

				// Float

				if (this.SALDOACTUA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.SALDOACTUA);
				}

				// java.util.Date

				writeDate(this.FECHA_SOLI, dos);

				// String

				writeString(this.EXTENSION, dos);

				// Float

				if (this.CUMTEMPORA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.CUMTEMPORA);
				}

				// Float

				if (this.UVTEMPORAL == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.UVTEMPORAL);
				}

				// Boolean

				if (this.MARCA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeBoolean(this.MARCA);
				}

				// Float

				if (this.REBAJA == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.REBAJA);
				}

				// String

				writeString(this.IMAGEN, dos);

				// String

				writeString(this.CICLOGRA, dos);

				// java.util.Date

				writeDate(this.FEC_SAL, dos);

				// java.util.Date

				writeDate(this.FEC_REC, dos);

				// java.util.Date

				writeDate(this.FEC_APR, dos);

				// java.util.Date

				writeDate(this.FEC_BAC, dos);

				// java.util.Date

				writeDate(this.FEC_PDA, dos);

				// java.util.Date

				writeDate(this.FEC_CER, dos);

				// java.util.Date

				writeDate(this.FEC_FOT, dos);

				// String

				writeString(this.CONVENIO, dos);

				// String

				writeString(this.PUNTO, dos);

				// String

				writeString(this.ACTA, dos);

				// java.util.Date

				writeDate(this.FECHACT, dos);

				// String

				writeString(this.NUI, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CARNET=" + CARNET);
			sb.append(",CODCARRERA=" + CODCARRERA);
			sb.append(",NOMBRES=" + NOMBRES);
			sb.append(",APELLIDO1=" + APELLIDO1);
			sb.append(",APELLIDO2=" + APELLIDO2);
			sb.append(",APELLCASAD=" + APELLCASAD);
			sb.append(",MUNINACIMI=" + MUNINACIMI);
			sb.append(",DEPTONACIM=" + String.valueOf(DEPTONACIM));
			sb.append(",FECHANACIM=" + String.valueOf(FECHANACIM));
			sb.append(",NACIONALID=" + NACIONALID);
			sb.append(",EDAD=" + String.valueOf(EDAD));
			sb.append(",SEXO=" + SEXO);
			sb.append(",ESTADOCIVI=" + ESTADOCIVI);
			sb.append(",CEDULA=" + CEDULA);
			sb.append(",TELEFONO=" + TELEFONO);
			sb.append(",DIRECCION=" + DIRECCION);
			sb.append(",MUNIDIRECC=" + MUNIDIRECC);
			sb.append(",DEPTODIREC=" + String.valueOf(DEPTODIREC));
			sb.append(",INSTITUCIO=" + INSTITUCIO);
			sb.append(",TITULO=" + TITULO);
			sb.append(",EXPEDIENTE=" + EXPEDIENTE);
			sb.append(",LUGARTRABA=" + LUGARTRABA);
			sb.append(",TELTRABAJO=" + TELTRABAJO);
			sb.append(",DIRTRABAJO=" + DIRTRABAJO);
			sb.append(",TIPOINGRES=" + TIPOINGRES);
			sb.append(",ESTATUS=" + ESTATUS);
			sb.append(",CICLOINGRE=" + CICLOINGRE);
			sb.append(",OBSERVACIO=" + OBSERVACIO);
			sb.append(",TITULOBACH=" + String.valueOf(TITULOBACH));
			sb.append(",PARTIDAORI=" + String.valueOf(PARTIDAORI));
			sb.append(",CERTIFICAC=" + String.valueOf(CERTIFICAC));
			sb.append(",FOTOS=" + String.valueOf(FOTOS));
			sb.append(",DECLARACIO=" + String.valueOf(DECLARACIO));
			sb.append(",CODIGOINTE=" + String.valueOf(CODIGOINTE));
			sb.append(",AVISOS_C=" + String.valueOf(AVISOS_C));
			sb.append(",AVISOS_I=" + String.valueOf(AVISOS_I));
			sb.append(",AVISOS_D=" + String.valueOf(AVISOS_D));
			sb.append(",EMPRESA=" + EMPRESA);
			sb.append(",TIPOBECA=" + TIPOBECA);
			sb.append(",EMPRESABEC=" + EMPRESABEC);
			sb.append(",CODIGO_PLA=" + CODIGO_PLA);
			sb.append(",CUMGENERAL=" + String.valueOf(CUMGENERAL));
			sb.append(",CUMRELATIV=" + String.valueOf(CUMRELATIV));
			sb.append(",CODIGO_USU=" + CODIGO_USU);
			sb.append(",FECHA_INGR=" + String.valueOf(FECHA_INGR));
			sb.append(",TIPOPAGO=" + TIPOPAGO);
			sb.append(",SALDOANTER=" + String.valueOf(SALDOANTER));
			sb.append(",CARGOS=" + String.valueOf(CARGOS));
			sb.append(",ABONOS=" + String.valueOf(ABONOS));
			sb.append(",SALDOACTUA=" + String.valueOf(SALDOACTUA));
			sb.append(",FECHA_SOLI=" + String.valueOf(FECHA_SOLI));
			sb.append(",EXTENSION=" + EXTENSION);
			sb.append(",CUMTEMPORA=" + String.valueOf(CUMTEMPORA));
			sb.append(",UVTEMPORAL=" + String.valueOf(UVTEMPORAL));
			sb.append(",MARCA=" + String.valueOf(MARCA));
			sb.append(",REBAJA=" + String.valueOf(REBAJA));
			sb.append(",IMAGEN=" + IMAGEN);
			sb.append(",CICLOGRA=" + CICLOGRA);
			sb.append(",FEC_SAL=" + String.valueOf(FEC_SAL));
			sb.append(",FEC_REC=" + String.valueOf(FEC_REC));
			sb.append(",FEC_APR=" + String.valueOf(FEC_APR));
			sb.append(",FEC_BAC=" + String.valueOf(FEC_BAC));
			sb.append(",FEC_PDA=" + String.valueOf(FEC_PDA));
			sb.append(",FEC_CER=" + String.valueOf(FEC_CER));
			sb.append(",FEC_FOT=" + String.valueOf(FEC_FOT));
			sb.append(",CONVENIO=" + CONVENIO);
			sb.append(",PUNTO=" + PUNTO);
			sb.append(",ACTA=" + ACTA);
			sb.append(",FECHACT=" + String.valueOf(FECHACT));
			sb.append(",NUI=" + NUI);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2
						.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";
		String currentComponent = "";

		try {

			String currentMethodName = new Exception().getStackTrace()[0]
					.getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();
				ExpedienteStruct Expediente = new ExpedienteStruct();

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());
				currentComponent = "tDBOutput_2";

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				boolean whetherReject_tDBOutput_2 = false;

				String url_tDBOutput_2 = "jdbc:odbc:" + "RegistroAcademico";

				int updateKeyCount_tDBOutput_2 = 2;
				if (updateKeyCount_tDBOutput_2 < 1) {
					throw new RuntimeException(
							"For update, Schema must have a key");
				}
				java.lang.Class.forName("sun.jdbc.odbc.JdbcOdbcDriver");
				String dbUser_tDBOutput_2 = "";
				String dbPwd_tDBOutput_2 = "";
				java.sql.Connection conn_tDBOutput_2 = java.sql.DriverManager
						.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
								dbPwd_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement("SELECT COUNT(1) FROM "
								+ "expedientealumno"
								+ " WHERE carnet = ? AND nui = ?");
				String insert_tDBOutput_2 = "INSERT INTO "
						+ "expedientealumno"
						+ " (carnet,codcarrera,nombres,apellido1,apellido2,apellcasada,muninacimi,deptonacim,fechanacim,nacionalidad,edad,sexo,estadocivil,cedula,telefono,direccion,munidirecc,deptodirecc,institucion,titulo,expediente,lugartrabajo,teltrabajo,dirtrabajo,tipoingreso,estatus,cicloingreso,observacion,titulobach,partidaoriginal,certificacion,fotos,declaracion,codigointerno,avisos_c,avisos_i,avisos_d,empresa,tipobeca,empresabec,codigo_plan,cumgeneral,cumrelativo,codigo_usuario,fecha_ingr,tipopago,saldoanterior,cargos,abonos,saldoactual,fecha_solicitud,extension,cumtemporal,uvtemporal,marca,rebaja,imagen,ciclogra,fec_sal,fec_rec,fec_apr,fec_bac,fec_pda,fec_cer,fec_fot,convenio,punto,acta,fechact,nui) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmtInsert_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(insert_tDBOutput_2);
				String update_tDBOutput_2 = "UPDATE "
						+ "expedientealumno"
						+ " SET codcarrera = ?,nombres = ?,apellido1 = ?,apellido2 = ?,apellcasada = ?,muninacimi = ?,deptonacim = ?,fechanacim = ?,nacionalidad = ?,edad = ?,sexo = ?,estadocivil = ?,cedula = ?,telefono = ?,direccion = ?,munidirecc = ?,deptodirecc = ?,institucion = ?,titulo = ?,expediente = ?,lugartrabajo = ?,teltrabajo = ?,dirtrabajo = ?,tipoingreso = ?,estatus = ?,cicloingreso = ?,observacion = ?,titulobach = ?,partidaoriginal = ?,certificacion = ?,fotos = ?,declaracion = ?,codigointerno = ?,avisos_c = ?,avisos_i = ?,avisos_d = ?,empresa = ?,tipobeca = ?,empresabec = ?,codigo_plan = ?,cumgeneral = ?,cumrelativo = ?,codigo_usuario = ?,fecha_ingr = ?,tipopago = ?,saldoanterior = ?,cargos = ?,abonos = ?,saldoactual = ?,fecha_solicitud = ?,extension = ?,cumtemporal = ?,uvtemporal = ?,marca = ?,rebaja = ?,imagen = ?,ciclogra = ?,fec_sal = ?,fec_rec = ?,fec_apr = ?,fec_bac = ?,fec_pda = ?,fec_cer = ?,fec_fot = ?,convenio = ?,punto = ?,acta = ?,fechact = ? WHERE carnet = ? AND nui = ?";
				java.sql.PreparedStatement pstmtUpdate_tDBOutput_2 = conn_tDBOutput_2
						.prepareStatement(update_tDBOutput_2);

				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());
				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				ExpedienteStruct Expediente_tmp = new ExpedienteStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tMysqlInput_2 begin ] start
				 */

				ok_Hash.put("tMysqlInput_2", false);
				start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
				currentComponent = "tMysqlInput_2";

				int tos_count_tMysqlInput_2 = 0;

				java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2
						.getTime();
				int nb_line_tMysqlInput_2 = 0;
				java.sql.Connection conn_tMysqlInput_2 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");

				String url_tMysqlInput_2 = "jdbc:mysql://" + "localhost" + ":"
						+ "3306" + "/" + "siai" + "?"
						+ "noDatetimeStringSync=true";
				String dbUser_tMysqlInput_2 = "root";
				String dbPwd_tMysqlInput_2 = "root";
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_2, dbUser_tMysqlInput_2,
						dbPwd_tMysqlInput_2);

				java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2
						.createStatement();

				String dbquery_tMysqlInput_2 = "SELECT    `expedientealumno`.`CARNET`,    `expedientealumno`.`CODCARRERA`,    `expedientealumno`.`NOMBRES`,    `expedientealumno`.`APELLIDO1`,    `expedientealumno`.`APELLIDO2`,    `expedientealumno`.`APELLCASAD`,    `expedientealumno`.`MUNINACIMI`,    `expedientealumno`.`DEPTONACIM`,    `expedientealumno`.`FECHANACIM`,    `expedientealumno`.`NACIONALID`,    `expedientealumno`.`EDAD`,    `expedientealumno`.`SEXO`,    `expedientealumno`.`ESTADOCIVI`,    `expedientealumno`.`CEDULA`,    `expedientealumno`.`TELEFONO`,    `expedientealumno`.`DIRECCION`,    `expedientealumno`.`MUNIDIRECC`,    `expedientealumno`.`DEPTODIREC`,    `expedientealumno`.`INSTITUCIO`,    `expedientealumno`.`TITULO`,    `expedientealumno`.`EXPEDIENTE`,    `expedientealumno`.`LUGARTRABA`,    `expedientealumno`.`TELTRABAJO`,    `expedientealumno`.`DIRTRABAJO`,    `expedientealumno`.`TIPOINGRES`,    `expedientealumno`.`ESTATUS`,    `expedientealumno`.`CICLOINGRE`,    `expedientealumno`.`OBSERVACIO`,    `expedientealumno`.`TITULOBACH`,    `expedientealumno`.`PARTIDAORI`,    `expedientealumno`.`CERTIFICAC`,    `expedientealumno`.`FOTOS`,    `expedientealumno`.`DECLARACIO`,    `expedientealumno`.`CODIGOINTE`,    `expedientealumno`.`AVISOS_C`,    `expedientealumno`.`AVISOS_I`,    `expedientealumno`.`AVISOS_D`,    `expedientealumno`.`EMPRESA`,    `expedientealumno`.`TIPOBECA`,    `expedientealumno`.`EMPRESABEC`,    `expedientealumno`.`CODIGO_PLA`,    `expedientealumno`.`CUMGENERAL`,    `expedientealumno`.`CUMRELATIV`,    `expedientealumno`.`CODIGO_USU`,    `expedientealumno`.`FECHA_INGR`,    `expedientealumno`.`TIPOPAGO`,    `expedientealumno`.`SALDOANTER`,    `expedientealumno`.`CARGOS`,    `expedientealumno`.`ABONOS`,    `expedientealumno`.`SALDOACTUA`,    `expedientealumno`.`FECHA_SOLI`,    `expedientealumno`.`EXTENSION`,    `expedientealumno`.`CUMTEMPORA`,    `expedientealumno`.`UVTEMPORAL`,    `expedientealumno`.`MARCA`,    `expedientealumno`.`REBAJA`,    `expedientealumno`.`IMAGEN`,    `expedientealumno`.`CICLOGRA`,    `expedientealumno`.`FEC_SAL`,    `expedientealumno`.`FEC_REC`,    `expedientealumno`.`FEC_APR`,    `expedientealumno`.`FEC_BAC`,    `expedientealumno`.`FEC_PDA`,    `expedientealumno`.`FEC_CER`,    `expedientealumno`.`FEC_FOT`,    `expedientealumno`.`CONVENIO`,    `expedientealumno`.`PUNTO`,    `expedientealumno`.`ACTA`,    `expedientealumno`.`FECHACT`,    `expedientealumno`.`NUI` FROM `expedientealumno` WHERE  `INSTITUCIO` != ' ' ";

				globalMap.put("tMysqlInput_2_QUERY", dbquery_tMysqlInput_2);

				java.sql.ResultSet rs_tMysqlInput_2 = stmt_tMysqlInput_2
						.executeQuery(dbquery_tMysqlInput_2);
				java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2
						.getMetaData();
				int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2
						.getColumnCount();

				String tmpContent_tMysqlInput_2 = null;
				while (rs_tMysqlInput_2.next()) {
					nb_line_tMysqlInput_2++;

					if (colQtyInRs_tMysqlInput_2 < 1) {
						row2.CARNET = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(1);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CARNET = tmpContent_tMysqlInput_2;
						} else {
							row2.CARNET = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 2) {
						row2.CODCARRERA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(2);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CODCARRERA = tmpContent_tMysqlInput_2;
						} else {
							row2.CODCARRERA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 3) {
						row2.NOMBRES = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(3);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.NOMBRES = tmpContent_tMysqlInput_2;
						} else {
							row2.NOMBRES = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 4) {
						row2.APELLIDO1 = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(4);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.APELLIDO1 = tmpContent_tMysqlInput_2;
						} else {
							row2.APELLIDO1 = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 5) {
						row2.APELLIDO2 = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(5);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.APELLIDO2 = tmpContent_tMysqlInput_2;
						} else {
							row2.APELLIDO2 = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 6) {
						row2.APELLCASAD = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(6);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.APELLCASAD = tmpContent_tMysqlInput_2;
						} else {
							row2.APELLCASAD = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 7) {
						row2.MUNINACIMI = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(7);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.MUNINACIMI = tmpContent_tMysqlInput_2;
						} else {
							row2.MUNINACIMI = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 8) {
						row2.DEPTONACIM = null;
					} else {

						if (rs_tMysqlInput_2.getObject(8) != null) {
							row2.DEPTONACIM = rs_tMysqlInput_2.getFloat(8);
						} else {
							row2.DEPTONACIM = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 9) {
						row2.FECHANACIM = null;
					} else {

						if (rs_tMysqlInput_2.getString(9) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(9);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FECHANACIM = rs_tMysqlInput_2
										.getTimestamp(9);
							} else {
								row2.FECHANACIM = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FECHANACIM = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 10) {
						row2.NACIONALID = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(10);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.NACIONALID = tmpContent_tMysqlInput_2;
						} else {
							row2.NACIONALID = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 11) {
						row2.EDAD = null;
					} else {

						if (rs_tMysqlInput_2.getObject(11) != null) {
							row2.EDAD = rs_tMysqlInput_2.getFloat(11);
						} else {
							row2.EDAD = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 12) {
						row2.SEXO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(12);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.SEXO = tmpContent_tMysqlInput_2;
						} else {
							row2.SEXO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 13) {
						row2.ESTADOCIVI = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(13);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.ESTADOCIVI = tmpContent_tMysqlInput_2;
						} else {
							row2.ESTADOCIVI = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 14) {
						row2.CEDULA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(14);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CEDULA = tmpContent_tMysqlInput_2;
						} else {
							row2.CEDULA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 15) {
						row2.TELEFONO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(15);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.TELEFONO = tmpContent_tMysqlInput_2;
						} else {
							row2.TELEFONO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 16) {
						row2.DIRECCION = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(16);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.DIRECCION = tmpContent_tMysqlInput_2;
						} else {
							row2.DIRECCION = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 17) {
						row2.MUNIDIRECC = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(17);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.MUNIDIRECC = tmpContent_tMysqlInput_2;
						} else {
							row2.MUNIDIRECC = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 18) {
						row2.DEPTODIREC = null;
					} else {

						if (rs_tMysqlInput_2.getObject(18) != null) {
							row2.DEPTODIREC = rs_tMysqlInput_2.getFloat(18);
						} else {
							row2.DEPTODIREC = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 19) {
						row2.INSTITUCIO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(19);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.INSTITUCIO = tmpContent_tMysqlInput_2;
						} else {
							row2.INSTITUCIO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 20) {
						row2.TITULO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(20);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.TITULO = tmpContent_tMysqlInput_2;
						} else {
							row2.TITULO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 21) {
						row2.EXPEDIENTE = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(21);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.EXPEDIENTE = tmpContent_tMysqlInput_2;
						} else {
							row2.EXPEDIENTE = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 22) {
						row2.LUGARTRABA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(22);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.LUGARTRABA = tmpContent_tMysqlInput_2;
						} else {
							row2.LUGARTRABA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 23) {
						row2.TELTRABAJO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(23);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.TELTRABAJO = tmpContent_tMysqlInput_2;
						} else {
							row2.TELTRABAJO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 24) {
						row2.DIRTRABAJO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(24);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.DIRTRABAJO = tmpContent_tMysqlInput_2;
						} else {
							row2.DIRTRABAJO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 25) {
						row2.TIPOINGRES = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(25);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.TIPOINGRES = tmpContent_tMysqlInput_2;
						} else {
							row2.TIPOINGRES = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 26) {
						row2.ESTATUS = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(26);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.ESTATUS = tmpContent_tMysqlInput_2;
						} else {
							row2.ESTATUS = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 27) {
						row2.CICLOINGRE = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(27);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CICLOINGRE = tmpContent_tMysqlInput_2;
						} else {
							row2.CICLOINGRE = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 28) {
						row2.OBSERVACIO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(28);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.OBSERVACIO = tmpContent_tMysqlInput_2;
						} else {
							row2.OBSERVACIO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 29) {
						row2.TITULOBACH = null;
					} else {

						if (rs_tMysqlInput_2.getObject(29) != null) {
							row2.TITULOBACH = rs_tMysqlInput_2.getBoolean(29);
						} else {
							row2.TITULOBACH = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 30) {
						row2.PARTIDAORI = null;
					} else {

						if (rs_tMysqlInput_2.getObject(30) != null) {
							row2.PARTIDAORI = rs_tMysqlInput_2.getBoolean(30);
						} else {
							row2.PARTIDAORI = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 31) {
						row2.CERTIFICAC = null;
					} else {

						if (rs_tMysqlInput_2.getObject(31) != null) {
							row2.CERTIFICAC = rs_tMysqlInput_2.getBoolean(31);
						} else {
							row2.CERTIFICAC = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 32) {
						row2.FOTOS = null;
					} else {

						if (rs_tMysqlInput_2.getObject(32) != null) {
							row2.FOTOS = rs_tMysqlInput_2.getBoolean(32);
						} else {
							row2.FOTOS = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 33) {
						row2.DECLARACIO = null;
					} else {

						if (rs_tMysqlInput_2.getObject(33) != null) {
							row2.DECLARACIO = rs_tMysqlInput_2.getBoolean(33);
						} else {
							row2.DECLARACIO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 34) {
						row2.CODIGOINTE = null;
					} else {

						if (rs_tMysqlInput_2.getObject(34) != null) {
							row2.CODIGOINTE = rs_tMysqlInput_2.getFloat(34);
						} else {
							row2.CODIGOINTE = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 35) {
						row2.AVISOS_C = null;
					} else {

						if (rs_tMysqlInput_2.getObject(35) != null) {
							row2.AVISOS_C = rs_tMysqlInput_2.getFloat(35);
						} else {
							row2.AVISOS_C = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 36) {
						row2.AVISOS_I = null;
					} else {

						if (rs_tMysqlInput_2.getObject(36) != null) {
							row2.AVISOS_I = rs_tMysqlInput_2.getFloat(36);
						} else {
							row2.AVISOS_I = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 37) {
						row2.AVISOS_D = null;
					} else {

						if (rs_tMysqlInput_2.getObject(37) != null) {
							row2.AVISOS_D = rs_tMysqlInput_2.getFloat(37);
						} else {
							row2.AVISOS_D = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 38) {
						row2.EMPRESA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(38);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.EMPRESA = tmpContent_tMysqlInput_2;
						} else {
							row2.EMPRESA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 39) {
						row2.TIPOBECA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(39);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.TIPOBECA = tmpContent_tMysqlInput_2;
						} else {
							row2.TIPOBECA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 40) {
						row2.EMPRESABEC = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(40);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.EMPRESABEC = tmpContent_tMysqlInput_2;
						} else {
							row2.EMPRESABEC = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 41) {
						row2.CODIGO_PLA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(41);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CODIGO_PLA = tmpContent_tMysqlInput_2;
						} else {
							row2.CODIGO_PLA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 42) {
						row2.CUMGENERAL = null;
					} else {

						if (rs_tMysqlInput_2.getObject(42) != null) {
							row2.CUMGENERAL = rs_tMysqlInput_2.getFloat(42);
						} else {
							row2.CUMGENERAL = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 43) {
						row2.CUMRELATIV = null;
					} else {

						if (rs_tMysqlInput_2.getObject(43) != null) {
							row2.CUMRELATIV = rs_tMysqlInput_2.getFloat(43);
						} else {
							row2.CUMRELATIV = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 44) {
						row2.CODIGO_USU = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(44);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CODIGO_USU = tmpContent_tMysqlInput_2;
						} else {
							row2.CODIGO_USU = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 45) {
						row2.FECHA_INGR = null;
					} else {

						if (rs_tMysqlInput_2.getString(45) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(45);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FECHA_INGR = rs_tMysqlInput_2
										.getTimestamp(45);
							} else {
								row2.FECHA_INGR = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FECHA_INGR = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 46) {
						row2.TIPOPAGO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(46);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.TIPOPAGO = tmpContent_tMysqlInput_2;
						} else {
							row2.TIPOPAGO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 47) {
						row2.SALDOANTER = null;
					} else {

						if (rs_tMysqlInput_2.getObject(47) != null) {
							row2.SALDOANTER = rs_tMysqlInput_2.getFloat(47);
						} else {
							row2.SALDOANTER = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 48) {
						row2.CARGOS = null;
					} else {

						if (rs_tMysqlInput_2.getObject(48) != null) {
							row2.CARGOS = rs_tMysqlInput_2.getFloat(48);
						} else {
							row2.CARGOS = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 49) {
						row2.ABONOS = null;
					} else {

						if (rs_tMysqlInput_2.getObject(49) != null) {
							row2.ABONOS = rs_tMysqlInput_2.getFloat(49);
						} else {
							row2.ABONOS = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 50) {
						row2.SALDOACTUA = null;
					} else {

						if (rs_tMysqlInput_2.getObject(50) != null) {
							row2.SALDOACTUA = rs_tMysqlInput_2.getFloat(50);
						} else {
							row2.SALDOACTUA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 51) {
						row2.FECHA_SOLI = null;
					} else {

						if (rs_tMysqlInput_2.getString(51) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(51);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FECHA_SOLI = rs_tMysqlInput_2
										.getTimestamp(51);
							} else {
								row2.FECHA_SOLI = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FECHA_SOLI = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 52) {
						row2.EXTENSION = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(52);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.EXTENSION = tmpContent_tMysqlInput_2;
						} else {
							row2.EXTENSION = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 53) {
						row2.CUMTEMPORA = null;
					} else {

						if (rs_tMysqlInput_2.getObject(53) != null) {
							row2.CUMTEMPORA = rs_tMysqlInput_2.getFloat(53);
						} else {
							row2.CUMTEMPORA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 54) {
						row2.UVTEMPORAL = null;
					} else {

						if (rs_tMysqlInput_2.getObject(54) != null) {
							row2.UVTEMPORAL = rs_tMysqlInput_2.getFloat(54);
						} else {
							row2.UVTEMPORAL = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 55) {
						row2.MARCA = null;
					} else {

						if (rs_tMysqlInput_2.getObject(55) != null) {
							row2.MARCA = rs_tMysqlInput_2.getBoolean(55);
						} else {
							row2.MARCA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 56) {
						row2.REBAJA = null;
					} else {

						if (rs_tMysqlInput_2.getObject(56) != null) {
							row2.REBAJA = rs_tMysqlInput_2.getFloat(56);
						} else {
							row2.REBAJA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 57) {
						row2.IMAGEN = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(57);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.IMAGEN = tmpContent_tMysqlInput_2;
						} else {
							row2.IMAGEN = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 58) {
						row2.CICLOGRA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(58);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CICLOGRA = tmpContent_tMysqlInput_2;
						} else {
							row2.CICLOGRA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 59) {
						row2.FEC_SAL = null;
					} else {

						if (rs_tMysqlInput_2.getString(59) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(59);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FEC_SAL = rs_tMysqlInput_2
										.getTimestamp(59);
							} else {
								row2.FEC_SAL = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FEC_SAL = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 60) {
						row2.FEC_REC = null;
					} else {

						if (rs_tMysqlInput_2.getString(60) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(60);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FEC_REC = rs_tMysqlInput_2
										.getTimestamp(60);
							} else {
								row2.FEC_REC = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FEC_REC = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 61) {
						row2.FEC_APR = null;
					} else {

						if (rs_tMysqlInput_2.getString(61) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(61);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FEC_APR = rs_tMysqlInput_2
										.getTimestamp(61);
							} else {
								row2.FEC_APR = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FEC_APR = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 62) {
						row2.FEC_BAC = null;
					} else {

						if (rs_tMysqlInput_2.getString(62) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(62);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FEC_BAC = rs_tMysqlInput_2
										.getTimestamp(62);
							} else {
								row2.FEC_BAC = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FEC_BAC = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 63) {
						row2.FEC_PDA = null;
					} else {

						if (rs_tMysqlInput_2.getString(63) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(63);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FEC_PDA = rs_tMysqlInput_2
										.getTimestamp(63);
							} else {
								row2.FEC_PDA = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FEC_PDA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 64) {
						row2.FEC_CER = null;
					} else {

						if (rs_tMysqlInput_2.getString(64) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(64);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FEC_CER = rs_tMysqlInput_2
										.getTimestamp(64);
							} else {
								row2.FEC_CER = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FEC_CER = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 65) {
						row2.FEC_FOT = null;
					} else {

						if (rs_tMysqlInput_2.getString(65) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(65);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FEC_FOT = rs_tMysqlInput_2
										.getTimestamp(65);
							} else {
								row2.FEC_FOT = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FEC_FOT = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 66) {
						row2.CONVENIO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(66);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.CONVENIO = tmpContent_tMysqlInput_2;
						} else {
							row2.CONVENIO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 67) {
						row2.PUNTO = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(67);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.PUNTO = tmpContent_tMysqlInput_2;
						} else {
							row2.PUNTO = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 68) {
						row2.ACTA = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(68);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.ACTA = tmpContent_tMysqlInput_2;
						} else {
							row2.ACTA = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 69) {
						row2.FECHACT = null;
					} else {

						if (rs_tMysqlInput_2.getString(69) != null) {
							String dateString_tMysqlInput_2 = rs_tMysqlInput_2
									.getString(69);
							if (!("0000-00-00")
									.equals(dateString_tMysqlInput_2)
									&& !("0000-00-00 00:00:00")
											.equals(dateString_tMysqlInput_2)) {
								row2.FECHACT = rs_tMysqlInput_2
										.getTimestamp(69);
							} else {
								row2.FECHACT = (java.util.Date) year0_tMysqlInput_2
										.clone();
							}
						} else {
							row2.FECHACT = null;
						}

					}
					if (colQtyInRs_tMysqlInput_2 < 70) {
						row2.NUI = null;
					} else {

						tmpContent_tMysqlInput_2 = rs_tMysqlInput_2
								.getString(70);
						if (tmpContent_tMysqlInput_2 != null) {
							row2.NUI = tmpContent_tMysqlInput_2;
						} else {
							row2.NUI = null;
						}

					}

					/**
					 * [tMysqlInput_2 begin ] stop
					 */
					/**
					 * [tMysqlInput_2 main ] start
					 */

					currentComponent = "tMysqlInput_2";

					tos_count_tMysqlInput_2++;

					/**
					 * [tMysqlInput_2 main ] stop
					 */

					/**
					 * [tMap_2 main ] start
					 */

					currentComponent = "tMap_2";

					boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_2 = false;
					boolean mainRowRejected_tMap_2 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
						// ###############################
						// # Output tables

						Expediente = null;

						// # Output table : 'Expediente'
						Expediente_tmp.carnet = row2.CARNET;
						Expediente_tmp.codcarrera = row2.CODCARRERA;
						Expediente_tmp.nombres = row2.NOMBRES;
						Expediente_tmp.apellido1 = row2.APELLIDO1;
						Expediente_tmp.apellido2 = row2.APELLIDO2;
						Expediente_tmp.apellcasada = row2.APELLCASAD;
						Expediente_tmp.muninacimi = row2.MUNINACIMI;
						Expediente_tmp.deptonacim = row2.DEPTONACIM;
						Expediente_tmp.fechanacim = row2.FECHANACIM;
						Expediente_tmp.nacionalidad = row2.NACIONALID;
						Expediente_tmp.edad = row2.EDAD;
						Expediente_tmp.sexo = row2.SEXO;
						Expediente_tmp.estadocivil = row2.ESTADOCIVI;
						Expediente_tmp.cedula = row2.CEDULA;
						Expediente_tmp.telefono = row2.TELEFONO;
						Expediente_tmp.direccion = row2.DIRECCION;
						Expediente_tmp.munidirecc = row2.MUNIDIRECC;
						Expediente_tmp.deptodirecc = row2.DEPTODIREC;
						Expediente_tmp.institucion = row2.INSTITUCIO;
						Expediente_tmp.titulo = row2.TITULO;
						Expediente_tmp.expediente = row2.EXPEDIENTE;
						Expediente_tmp.lugartrabajo = row2.LUGARTRABA;
						Expediente_tmp.teltrabajo = row2.TELTRABAJO;
						Expediente_tmp.dirtrabajo = row2.DIRTRABAJO;
						Expediente_tmp.tipoingreso = row2.TIPOINGRES;
						Expediente_tmp.estatus = row2.ESTATUS;
						Expediente_tmp.cicloingreso = row2.CICLOINGRE;
						Expediente_tmp.observacion = row2.OBSERVACIO;
						Expediente_tmp.titulobach = row2.TITULOBACH;
						Expediente_tmp.partidaoriginal = row2.PARTIDAORI;
						Expediente_tmp.certificacion = row2.CERTIFICAC;
						Expediente_tmp.fotos = row2.FOTOS;
						Expediente_tmp.declaracion = row2.DECLARACIO;
						Expediente_tmp.codigointerno = row2.CODIGOINTE;
						Expediente_tmp.avisos_c = row2.AVISOS_C;
						Expediente_tmp.avisos_i = row2.AVISOS_I;
						Expediente_tmp.avisos_d = row2.AVISOS_D;
						Expediente_tmp.empresa = row2.EMPRESA;
						Expediente_tmp.tipobeca = row2.TIPOBECA;
						Expediente_tmp.empresabec = row2.EMPRESABEC;
						Expediente_tmp.codigo_plan = row2.CODIGO_PLA;
						Expediente_tmp.cumgeneral = row2.CUMGENERAL;
						Expediente_tmp.cumrelativo = row2.CUMRELATIV;
						Expediente_tmp.codigo_usuario = row2.CODIGO_USU;
						Expediente_tmp.fecha_ingr = row2.FECHA_INGR;
						Expediente_tmp.tipopago = row2.TIPOPAGO;
						Expediente_tmp.saldoanterior = row2.SALDOANTER;
						Expediente_tmp.cargos = row2.CARGOS;
						Expediente_tmp.abonos = row2.ABONOS;
						Expediente_tmp.saldoactual = row2.SALDOACTUA;
						Expediente_tmp.fecha_solicitud = row2.FECHA_SOLI;
						Expediente_tmp.extension = row2.EXTENSION;
						Expediente_tmp.cumtemporal = row2.CUMTEMPORA;
						Expediente_tmp.uvtemporal = row2.UVTEMPORAL;
						Expediente_tmp.marca = row2.MARCA;
						Expediente_tmp.rebaja = row2.REBAJA;
						Expediente_tmp.imagen = row2.IMAGEN;
						Expediente_tmp.ciclogra = row2.CICLOGRA;
						Expediente_tmp.fec_sal = null;
						Expediente_tmp.fec_rec = null;
						Expediente_tmp.fec_apr = null;
						Expediente_tmp.fec_bac = row2.FEC_BAC;
						Expediente_tmp.fec_pda = row2.FEC_PDA;
						Expediente_tmp.fec_cer = row2.FEC_CER;
						Expediente_tmp.fec_fot = row2.FEC_FOT;
						Expediente_tmp.convenio = row2.CONVENIO;
						Expediente_tmp.punto = row2.PUNTO;
						Expediente_tmp.acta = row2.ACTA;
						Expediente_tmp.fechact = row2.FECHACT;
						Expediente_tmp.nui = row2.NUI;
						Expediente = Expediente_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_2 = false;

					tos_count_tMap_2++;

					/**
					 * [tMap_2 main ] stop
					 */
					// Start of branch "Expediente"
					if (Expediente != null) {

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						whetherReject_tDBOutput_2 = false;
						if (Expediente.carnet == null) {
							pstmt_tDBOutput_2
									.setNull(1, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(1, Expediente.carnet);
						}

						if (Expediente.nui == null) {
							pstmt_tDBOutput_2
									.setNull(2, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(2, Expediente.nui);
						}

						java.sql.ResultSet rs_tDBOutput_2 = pstmt_tDBOutput_2
								.executeQuery();
						int checkCount_tDBOutput_2 = -1;
						while (rs_tDBOutput_2.next()) {
							checkCount_tDBOutput_2 = rs_tDBOutput_2.getInt(1);
						}
						if (checkCount_tDBOutput_2 > 0) {

							if (Expediente.codcarrera == null) {
								pstmtUpdate_tDBOutput_2.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(1,
										Expediente.codcarrera);
							}

							if (Expediente.nombres == null) {
								pstmtUpdate_tDBOutput_2.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(2,
										Expediente.nombres);
							}

							if (Expediente.apellido1 == null) {
								pstmtUpdate_tDBOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(3,
										Expediente.apellido1);
							}

							if (Expediente.apellido2 == null) {
								pstmtUpdate_tDBOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(4,
										Expediente.apellido2);
							}

							if (Expediente.apellcasada == null) {
								pstmtUpdate_tDBOutput_2.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(5,
										Expediente.apellcasada);
							}

							if (Expediente.muninacimi == null) {
								pstmtUpdate_tDBOutput_2.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(6,
										Expediente.muninacimi);
							}

							if (Expediente.deptonacim == null) {
								pstmtUpdate_tDBOutput_2.setNull(7,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(7,
										Expediente.deptonacim);
							}

							if (Expediente.fechanacim != null) {
								pstmtUpdate_tDBOutput_2
										.setTimestamp(8,
												new java.sql.Timestamp(
														Expediente.fechanacim
																.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(8,
										java.sql.Types.DATE);
							}

							if (Expediente.nacionalidad == null) {
								pstmtUpdate_tDBOutput_2.setNull(9,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(9,
										Expediente.nacionalidad);
							}

							if (Expediente.edad == null) {
								pstmtUpdate_tDBOutput_2.setNull(10,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(10,
										Expediente.edad);
							}

							if (Expediente.sexo == null) {
								pstmtUpdate_tDBOutput_2.setNull(11,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(11,
										Expediente.sexo);
							}

							if (Expediente.estadocivil == null) {
								pstmtUpdate_tDBOutput_2.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(12,
										Expediente.estadocivil);
							}

							if (Expediente.cedula == null) {
								pstmtUpdate_tDBOutput_2.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(13,
										Expediente.cedula);
							}

							if (Expediente.telefono == null) {
								pstmtUpdate_tDBOutput_2.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(14,
										Expediente.telefono);
							}

							if (Expediente.direccion == null) {
								pstmtUpdate_tDBOutput_2.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(15,
										Expediente.direccion);
							}

							if (Expediente.munidirecc == null) {
								pstmtUpdate_tDBOutput_2.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(16,
										Expediente.munidirecc);
							}

							if (Expediente.deptodirecc == null) {
								pstmtUpdate_tDBOutput_2.setNull(17,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(17,
										Expediente.deptodirecc);
							}

							if (Expediente.institucion == null) {
								pstmtUpdate_tDBOutput_2.setNull(18,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(18,
										Expediente.institucion);
							}

							if (Expediente.titulo == null) {
								pstmtUpdate_tDBOutput_2.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(19,
										Expediente.titulo);
							}

							if (Expediente.expediente == null) {
								pstmtUpdate_tDBOutput_2.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(20,
										Expediente.expediente);
							}

							if (Expediente.lugartrabajo == null) {
								pstmtUpdate_tDBOutput_2.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(21,
										Expediente.lugartrabajo);
							}

							if (Expediente.teltrabajo == null) {
								pstmtUpdate_tDBOutput_2.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(22,
										Expediente.teltrabajo);
							}

							if (Expediente.dirtrabajo == null) {
								pstmtUpdate_tDBOutput_2.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(23,
										Expediente.dirtrabajo);
							}

							if (Expediente.tipoingreso == null) {
								pstmtUpdate_tDBOutput_2.setNull(24,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(24,
										Expediente.tipoingreso);
							}

							if (Expediente.estatus == null) {
								pstmtUpdate_tDBOutput_2.setNull(25,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(25,
										Expediente.estatus);
							}

							if (Expediente.cicloingreso == null) {
								pstmtUpdate_tDBOutput_2.setNull(26,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(26,
										Expediente.cicloingreso);
							}

							if (Expediente.observacion == null) {
								pstmtUpdate_tDBOutput_2.setNull(27,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(27,
										Expediente.observacion);
							}

							if (Expediente.titulobach == null) {
								pstmtUpdate_tDBOutput_2.setNull(28,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtUpdate_tDBOutput_2.setBoolean(28,
										Expediente.titulobach);
							}

							if (Expediente.partidaoriginal == null) {
								pstmtUpdate_tDBOutput_2.setNull(29,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtUpdate_tDBOutput_2.setBoolean(29,
										Expediente.partidaoriginal);
							}

							if (Expediente.certificacion == null) {
								pstmtUpdate_tDBOutput_2.setNull(30,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtUpdate_tDBOutput_2.setBoolean(30,
										Expediente.certificacion);
							}

							if (Expediente.fotos == null) {
								pstmtUpdate_tDBOutput_2.setNull(31,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtUpdate_tDBOutput_2.setBoolean(31,
										Expediente.fotos);
							}

							if (Expediente.declaracion == null) {
								pstmtUpdate_tDBOutput_2.setNull(32,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtUpdate_tDBOutput_2.setBoolean(32,
										Expediente.declaracion);
							}

							if (Expediente.codigointerno == null) {
								pstmtUpdate_tDBOutput_2.setNull(33,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(33,
										Expediente.codigointerno);
							}

							if (Expediente.avisos_c == null) {
								pstmtUpdate_tDBOutput_2.setNull(34,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(34,
										Expediente.avisos_c);
							}

							if (Expediente.avisos_i == null) {
								pstmtUpdate_tDBOutput_2.setNull(35,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(35,
										Expediente.avisos_i);
							}

							if (Expediente.avisos_d == null) {
								pstmtUpdate_tDBOutput_2.setNull(36,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(36,
										Expediente.avisos_d);
							}

							if (Expediente.empresa == null) {
								pstmtUpdate_tDBOutput_2.setNull(37,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(37,
										Expediente.empresa);
							}

							if (Expediente.tipobeca == null) {
								pstmtUpdate_tDBOutput_2.setNull(38,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(38,
										Expediente.tipobeca);
							}

							if (Expediente.empresabec == null) {
								pstmtUpdate_tDBOutput_2.setNull(39,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(39,
										Expediente.empresabec);
							}

							if (Expediente.codigo_plan == null) {
								pstmtUpdate_tDBOutput_2.setNull(40,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(40,
										Expediente.codigo_plan);
							}

							if (Expediente.cumgeneral == null) {
								pstmtUpdate_tDBOutput_2.setNull(41,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(41,
										Expediente.cumgeneral);
							}

							if (Expediente.cumrelativo == null) {
								pstmtUpdate_tDBOutput_2.setNull(42,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(42,
										Expediente.cumrelativo);
							}

							if (Expediente.codigo_usuario == null) {
								pstmtUpdate_tDBOutput_2.setNull(43,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(43,
										Expediente.codigo_usuario);
							}

							if (Expediente.fecha_ingr != null) {
								pstmtUpdate_tDBOutput_2
										.setTimestamp(44,
												new java.sql.Timestamp(
														Expediente.fecha_ingr
																.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(44,
										java.sql.Types.DATE);
							}

							if (Expediente.tipopago == null) {
								pstmtUpdate_tDBOutput_2.setNull(45,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(45,
										Expediente.tipopago);
							}

							if (Expediente.saldoanterior == null) {
								pstmtUpdate_tDBOutput_2.setNull(46,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(46,
										Expediente.saldoanterior);
							}

							if (Expediente.cargos == null) {
								pstmtUpdate_tDBOutput_2.setNull(47,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(47,
										Expediente.cargos);
							}

							if (Expediente.abonos == null) {
								pstmtUpdate_tDBOutput_2.setNull(48,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(48,
										Expediente.abonos);
							}

							if (Expediente.saldoactual == null) {
								pstmtUpdate_tDBOutput_2.setNull(49,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(49,
										Expediente.saldoactual);
							}

							if (Expediente.fecha_solicitud != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(50,
										new java.sql.Timestamp(
												Expediente.fecha_solicitud
														.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(50,
										java.sql.Types.DATE);
							}

							if (Expediente.extension == null) {
								pstmtUpdate_tDBOutput_2.setNull(51,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(51,
										Expediente.extension);
							}

							if (Expediente.cumtemporal == null) {
								pstmtUpdate_tDBOutput_2.setNull(52,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(52,
										Expediente.cumtemporal);
							}

							if (Expediente.uvtemporal == null) {
								pstmtUpdate_tDBOutput_2.setNull(53,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(53,
										Expediente.uvtemporal);
							}

							if (Expediente.marca == null) {
								pstmtUpdate_tDBOutput_2.setNull(54,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtUpdate_tDBOutput_2.setBoolean(54,
										Expediente.marca);
							}

							if (Expediente.rebaja == null) {
								pstmtUpdate_tDBOutput_2.setNull(55,
										java.sql.Types.FLOAT);
							} else {
								pstmtUpdate_tDBOutput_2.setFloat(55,
										Expediente.rebaja);
							}

							if (Expediente.imagen == null) {
								pstmtUpdate_tDBOutput_2.setNull(56,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(56,
										Expediente.imagen);
							}

							if (Expediente.ciclogra == null) {
								pstmtUpdate_tDBOutput_2.setNull(57,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(57,
										Expediente.ciclogra);
							}

							if (Expediente.fec_sal != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(58,
										new java.sql.Timestamp(
												Expediente.fec_sal.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(58,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_rec != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(59,
										new java.sql.Timestamp(
												Expediente.fec_rec.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(59,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_apr != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(60,
										new java.sql.Timestamp(
												Expediente.fec_apr.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(60,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_bac != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(61,
										new java.sql.Timestamp(
												Expediente.fec_bac.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(61,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_pda != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(62,
										new java.sql.Timestamp(
												Expediente.fec_pda.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(62,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_cer != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(63,
										new java.sql.Timestamp(
												Expediente.fec_cer.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(63,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_fot != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(64,
										new java.sql.Timestamp(
												Expediente.fec_fot.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(64,
										java.sql.Types.DATE);
							}

							if (Expediente.convenio == null) {
								pstmtUpdate_tDBOutput_2.setNull(65,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(65,
										Expediente.convenio);
							}

							if (Expediente.punto == null) {
								pstmtUpdate_tDBOutput_2.setNull(66,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(66,
										Expediente.punto);
							}

							if (Expediente.acta == null) {
								pstmtUpdate_tDBOutput_2.setNull(67,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(67,
										Expediente.acta);
							}

							if (Expediente.fechact != null) {
								pstmtUpdate_tDBOutput_2.setTimestamp(68,
										new java.sql.Timestamp(
												Expediente.fechact.getTime()));
							} else {
								pstmtUpdate_tDBOutput_2.setNull(68,
										java.sql.Types.DATE);
							}

							if (Expediente.carnet == null) {
								pstmtUpdate_tDBOutput_2.setNull(69,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(69,
										Expediente.carnet);
							}

							if (Expediente.nui == null) {
								pstmtUpdate_tDBOutput_2.setNull(70,
										java.sql.Types.VARCHAR);
							} else {
								pstmtUpdate_tDBOutput_2.setString(70,
										Expediente.nui);
							}

							try {
								updatedCount_tDBOutput_2 = updatedCount_tDBOutput_2
										+ pstmtUpdate_tDBOutput_2
												.executeUpdate();
							} catch (Exception e) {
								whetherReject_tDBOutput_2 = true;
								System.err.print(e.getMessage());
							}
						} else {

							if (Expediente.carnet == null) {
								pstmtInsert_tDBOutput_2.setNull(1,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(1,
										Expediente.carnet);
							}

							if (Expediente.codcarrera == null) {
								pstmtInsert_tDBOutput_2.setNull(2,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(2,
										Expediente.codcarrera);
							}

							if (Expediente.nombres == null) {
								pstmtInsert_tDBOutput_2.setNull(3,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(3,
										Expediente.nombres);
							}

							if (Expediente.apellido1 == null) {
								pstmtInsert_tDBOutput_2.setNull(4,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(4,
										Expediente.apellido1);
							}

							if (Expediente.apellido2 == null) {
								pstmtInsert_tDBOutput_2.setNull(5,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(5,
										Expediente.apellido2);
							}

							if (Expediente.apellcasada == null) {
								pstmtInsert_tDBOutput_2.setNull(6,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(6,
										Expediente.apellcasada);
							}

							if (Expediente.muninacimi == null) {
								pstmtInsert_tDBOutput_2.setNull(7,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(7,
										Expediente.muninacimi);
							}

							if (Expediente.deptonacim == null) {
								pstmtInsert_tDBOutput_2.setNull(8,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(8,
										Expediente.deptonacim);
							}

							if (Expediente.fechanacim != null) {
								pstmtInsert_tDBOutput_2
										.setTimestamp(9,
												new java.sql.Timestamp(
														Expediente.fechanacim
																.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(9,
										java.sql.Types.DATE);
							}

							if (Expediente.nacionalidad == null) {
								pstmtInsert_tDBOutput_2.setNull(10,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(10,
										Expediente.nacionalidad);
							}

							if (Expediente.edad == null) {
								pstmtInsert_tDBOutput_2.setNull(11,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(11,
										Expediente.edad);
							}

							if (Expediente.sexo == null) {
								pstmtInsert_tDBOutput_2.setNull(12,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(12,
										Expediente.sexo);
							}

							if (Expediente.estadocivil == null) {
								pstmtInsert_tDBOutput_2.setNull(13,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(13,
										Expediente.estadocivil);
							}

							if (Expediente.cedula == null) {
								pstmtInsert_tDBOutput_2.setNull(14,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(14,
										Expediente.cedula);
							}

							if (Expediente.telefono == null) {
								pstmtInsert_tDBOutput_2.setNull(15,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(15,
										Expediente.telefono);
							}

							if (Expediente.direccion == null) {
								pstmtInsert_tDBOutput_2.setNull(16,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(16,
										Expediente.direccion);
							}

							if (Expediente.munidirecc == null) {
								pstmtInsert_tDBOutput_2.setNull(17,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(17,
										Expediente.munidirecc);
							}

							if (Expediente.deptodirecc == null) {
								pstmtInsert_tDBOutput_2.setNull(18,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(18,
										Expediente.deptodirecc);
							}

							if (Expediente.institucion == null) {
								pstmtInsert_tDBOutput_2.setNull(19,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(19,
										Expediente.institucion);
							}

							if (Expediente.titulo == null) {
								pstmtInsert_tDBOutput_2.setNull(20,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(20,
										Expediente.titulo);
							}

							if (Expediente.expediente == null) {
								pstmtInsert_tDBOutput_2.setNull(21,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(21,
										Expediente.expediente);
							}

							if (Expediente.lugartrabajo == null) {
								pstmtInsert_tDBOutput_2.setNull(22,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(22,
										Expediente.lugartrabajo);
							}

							if (Expediente.teltrabajo == null) {
								pstmtInsert_tDBOutput_2.setNull(23,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(23,
										Expediente.teltrabajo);
							}

							if (Expediente.dirtrabajo == null) {
								pstmtInsert_tDBOutput_2.setNull(24,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(24,
										Expediente.dirtrabajo);
							}

							if (Expediente.tipoingreso == null) {
								pstmtInsert_tDBOutput_2.setNull(25,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(25,
										Expediente.tipoingreso);
							}

							if (Expediente.estatus == null) {
								pstmtInsert_tDBOutput_2.setNull(26,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(26,
										Expediente.estatus);
							}

							if (Expediente.cicloingreso == null) {
								pstmtInsert_tDBOutput_2.setNull(27,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(27,
										Expediente.cicloingreso);
							}

							if (Expediente.observacion == null) {
								pstmtInsert_tDBOutput_2.setNull(28,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(28,
										Expediente.observacion);
							}

							if (Expediente.titulobach == null) {
								pstmtInsert_tDBOutput_2.setNull(29,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtInsert_tDBOutput_2.setBoolean(29,
										Expediente.titulobach);
							}

							if (Expediente.partidaoriginal == null) {
								pstmtInsert_tDBOutput_2.setNull(30,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtInsert_tDBOutput_2.setBoolean(30,
										Expediente.partidaoriginal);
							}

							if (Expediente.certificacion == null) {
								pstmtInsert_tDBOutput_2.setNull(31,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtInsert_tDBOutput_2.setBoolean(31,
										Expediente.certificacion);
							}

							if (Expediente.fotos == null) {
								pstmtInsert_tDBOutput_2.setNull(32,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtInsert_tDBOutput_2.setBoolean(32,
										Expediente.fotos);
							}

							if (Expediente.declaracion == null) {
								pstmtInsert_tDBOutput_2.setNull(33,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtInsert_tDBOutput_2.setBoolean(33,
										Expediente.declaracion);
							}

							if (Expediente.codigointerno == null) {
								pstmtInsert_tDBOutput_2.setNull(34,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(34,
										Expediente.codigointerno);
							}

							if (Expediente.avisos_c == null) {
								pstmtInsert_tDBOutput_2.setNull(35,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(35,
										Expediente.avisos_c);
							}

							if (Expediente.avisos_i == null) {
								pstmtInsert_tDBOutput_2.setNull(36,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(36,
										Expediente.avisos_i);
							}

							if (Expediente.avisos_d == null) {
								pstmtInsert_tDBOutput_2.setNull(37,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(37,
										Expediente.avisos_d);
							}

							if (Expediente.empresa == null) {
								pstmtInsert_tDBOutput_2.setNull(38,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(38,
										Expediente.empresa);
							}

							if (Expediente.tipobeca == null) {
								pstmtInsert_tDBOutput_2.setNull(39,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(39,
										Expediente.tipobeca);
							}

							if (Expediente.empresabec == null) {
								pstmtInsert_tDBOutput_2.setNull(40,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(40,
										Expediente.empresabec);
							}

							if (Expediente.codigo_plan == null) {
								pstmtInsert_tDBOutput_2.setNull(41,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(41,
										Expediente.codigo_plan);
							}

							if (Expediente.cumgeneral == null) {
								pstmtInsert_tDBOutput_2.setNull(42,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(42,
										Expediente.cumgeneral);
							}

							if (Expediente.cumrelativo == null) {
								pstmtInsert_tDBOutput_2.setNull(43,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(43,
										Expediente.cumrelativo);
							}

							if (Expediente.codigo_usuario == null) {
								pstmtInsert_tDBOutput_2.setNull(44,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(44,
										Expediente.codigo_usuario);
							}

							if (Expediente.fecha_ingr != null) {
								pstmtInsert_tDBOutput_2
										.setTimestamp(45,
												new java.sql.Timestamp(
														Expediente.fecha_ingr
																.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(45,
										java.sql.Types.DATE);
							}

							if (Expediente.tipopago == null) {
								pstmtInsert_tDBOutput_2.setNull(46,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(46,
										Expediente.tipopago);
							}

							if (Expediente.saldoanterior == null) {
								pstmtInsert_tDBOutput_2.setNull(47,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(47,
										Expediente.saldoanterior);
							}

							if (Expediente.cargos == null) {
								pstmtInsert_tDBOutput_2.setNull(48,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(48,
										Expediente.cargos);
							}

							if (Expediente.abonos == null) {
								pstmtInsert_tDBOutput_2.setNull(49,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(49,
										Expediente.abonos);
							}

							if (Expediente.saldoactual == null) {
								pstmtInsert_tDBOutput_2.setNull(50,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(50,
										Expediente.saldoactual);
							}

							if (Expediente.fecha_solicitud != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(51,
										new java.sql.Timestamp(
												Expediente.fecha_solicitud
														.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(51,
										java.sql.Types.DATE);
							}

							if (Expediente.extension == null) {
								pstmtInsert_tDBOutput_2.setNull(52,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(52,
										Expediente.extension);
							}

							if (Expediente.cumtemporal == null) {
								pstmtInsert_tDBOutput_2.setNull(53,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(53,
										Expediente.cumtemporal);
							}

							if (Expediente.uvtemporal == null) {
								pstmtInsert_tDBOutput_2.setNull(54,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(54,
										Expediente.uvtemporal);
							}

							if (Expediente.marca == null) {
								pstmtInsert_tDBOutput_2.setNull(55,
										java.sql.Types.BOOLEAN);
							} else {
								pstmtInsert_tDBOutput_2.setBoolean(55,
										Expediente.marca);
							}

							if (Expediente.rebaja == null) {
								pstmtInsert_tDBOutput_2.setNull(56,
										java.sql.Types.FLOAT);
							} else {
								pstmtInsert_tDBOutput_2.setFloat(56,
										Expediente.rebaja);
							}

							if (Expediente.imagen == null) {
								pstmtInsert_tDBOutput_2.setNull(57,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(57,
										Expediente.imagen);
							}

							if (Expediente.ciclogra == null) {
								pstmtInsert_tDBOutput_2.setNull(58,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(58,
										Expediente.ciclogra);
							}

							if (Expediente.fec_sal != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(59,
										new java.sql.Timestamp(
												Expediente.fec_sal.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(59,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_rec != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(60,
										new java.sql.Timestamp(
												Expediente.fec_rec.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(60,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_apr != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(61,
										new java.sql.Timestamp(
												Expediente.fec_apr.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(61,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_bac != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(62,
										new java.sql.Timestamp(
												Expediente.fec_bac.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(62,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_pda != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(63,
										new java.sql.Timestamp(
												Expediente.fec_pda.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(63,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_cer != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(64,
										new java.sql.Timestamp(
												Expediente.fec_cer.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(64,
										java.sql.Types.DATE);
							}

							if (Expediente.fec_fot != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(65,
										new java.sql.Timestamp(
												Expediente.fec_fot.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(65,
										java.sql.Types.DATE);
							}

							if (Expediente.convenio == null) {
								pstmtInsert_tDBOutput_2.setNull(66,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(66,
										Expediente.convenio);
							}

							if (Expediente.punto == null) {
								pstmtInsert_tDBOutput_2.setNull(67,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(67,
										Expediente.punto);
							}

							if (Expediente.acta == null) {
								pstmtInsert_tDBOutput_2.setNull(68,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(68,
										Expediente.acta);
							}

							if (Expediente.fechact != null) {
								pstmtInsert_tDBOutput_2.setTimestamp(69,
										new java.sql.Timestamp(
												Expediente.fechact.getTime()));
							} else {
								pstmtInsert_tDBOutput_2.setNull(69,
										java.sql.Types.DATE);
							}

							if (Expediente.nui == null) {
								pstmtInsert_tDBOutput_2.setNull(70,
										java.sql.Types.VARCHAR);
							} else {
								pstmtInsert_tDBOutput_2.setString(70,
										Expediente.nui);
							}

							try {
								insertedCount_tDBOutput_2 = insertedCount_tDBOutput_2
										+ pstmtInsert_tDBOutput_2
												.executeUpdate();
							} catch (Exception e) {
								whetherReject_tDBOutput_2 = true;
								System.err.print(e.getMessage());
							}
						}
						nb_line_tDBOutput_2++;

						commitCounter_tDBOutput_2++;

						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

							conn_tDBOutput_2.commit();

							commitCounter_tDBOutput_2 = 0;
						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

					} // End of branch "Expediente"

					/**
					 * [tMysqlInput_2 end ] start
					 */

					currentComponent = "tMysqlInput_2";

				}
				stmt_tMysqlInput_2.close();
				conn_tMysqlInput_2.close();

				globalMap.put("tMysqlInput_2_NB_LINE", nb_line_tMysqlInput_2);

				ok_Hash.put("tMysqlInput_2", true);
				end_Hash.put("tMysqlInput_2", System.currentTimeMillis());

				/**
				 * [tMysqlInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				conn_tDBOutput_2.commit();
				if (pstmtUpdate_tDBOutput_2 != null) {

					pstmtUpdate_tDBOutput_2.close();

				}
				if (pstmtInsert_tDBOutput_2 != null) {

					pstmtInsert_tDBOutput_2.close();

				}
				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();

				}
				conn_tDBOutput_2.close();
				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2
						+ deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2
						+ updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2
						+ insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2
						+ rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED",
						nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tDBOutput_2);

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				/**
				 * [tDBOutput_2 end ] stop
				 */

			}// end the resume

		} catch (Exception e) {

			throw new TalendException(e, currentComponent, globalMap);

		} catch (java.lang.Error error) {

			throw new java.lang.Error(error);

		}

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;

	private boolean execStat = true;

	private ThreadLocal threadLocal = new ThreadLocal();
	{
		java.util.Map threadRunResultMap = new java.util.HashMap();
		threadRunResultMap.put("errorCode", null);
		threadRunResultMap.put("status", "");
		threadLocal.set(threadRunResultMap);
	}

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MYSQL_A_FOX MYSQL_A_FOXClass = new MYSQL_A_FOX();

		int exitCode = MYSQL_A_FOXClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public int runJobInTOS(String[] args) {

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = MYSQL_A_FOX.class.getClassLoader()
					.getResourceAsStream(
							"etl_upes_mysql_a_fox/mysql_a_fox_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}

		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {

		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_2) {

			e_tMysqlInput_2.printStackTrace();
			globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", -1);

		} finally {
		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : MYSQL_A_FOX");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue
							.substring(index + 1));
				}
			}
		}

	}

	private final String[][] escapeChars = { { "\\n", "\n" }, { "\\'", "\'" },
			{ "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" },
			{ "\\\\", "\\" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}
		for (String[] strArray : escapeChars) {
			keyValue = keyValue.replace(strArray[0], strArray[1]);
		}
		return keyValue;
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 161530 characters generated by Talend Open Studio for Data Integration on the
 * 13 de diciembre de 2012 15:23:46 CST
 ************************************************************************************************/
